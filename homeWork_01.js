// 1) Подробно прочитать про метод запроса OPTIONS - и кратко его описать, когда вызывается, где используется, что передает и принимает.

// Ответ:



// 2) Прочитать и описать ключевые особенности "HTTP" Версии 3.0

// Ответ: 

// Использует протокол передачи QUIC (Quick UDP Internet Connections) вместо TCP, который используется в HTTP/2.

// Вот некоторые изменения:

// 1. Протокол передачи данных: HTTP/3 использует протокол QUIC, который работает поверх UDP, в то время как HTTP/2 работает поверх TCP. 
// QUIC обеспечивает более быструю и надежную передачу данных за счет улучшенной обработки потерь пакетов и механизмов управления потоками.

// 2. Мультиплексирование: HTTP/3 поддерживает мультиплексирование запросов, как и HTTP/2, но благодаря протоколу QUIC это происходит более эффективно и без задержек.

// 3. Быстрое восстановление соединения и установка соединения: 
// HTTP/3 имеет более быстрое восстановление соединения после потери пакетов или изменения IP-адреса, что делает его более надежным в сетях с высокой задержкой. 
// Также включает быстрый механизм установки соединения, что позволяет устанавливать соединение с сервером быстрее по сравнению с предыдущими версиями HTTP.

// 4. Поддержка шифрования: HTTP/3 по умолчанию использует шифрование TLS, что обеспечивает более высокий уровень безопасности по сравнению с HTTP/2.

// 5. Server Push: В HTTP/3 также поддерживается механизм Server Push, как и в HTTP/2, но реализован он по-другому из-за отличий в протоколах передачи данных.

// 6. Улучшенная обработка ошибок: HTTP/3.0 включает улучшенные механизмы обработки ошибок.

// 7. Поддержка HTTP/2 функций: HTTP/3.0 сохраняет некоторые функции из HTTP/2, такие как приоритизация потоков и сжатие заголовков,
// но добавляет новые функции для улучшения производительности и безопасности.

// В целом, HTTP/3 представляет собой значительное улучшение по сравнению с HTTP/2, обеспечивая более высокую производительность, 
// надежность и безопасность при передаче данных через интернет.


// 3) Прочитать про способы отмены запроса, включая объект "AbortController"

// Ответ: сделано 

// 3) Написать по 2 примера создания примитивных значений (если есть несколько способов - использовать) (string, number, boolean, null, undefined, symbol, bigInt)

// Ответ:

// String

let str1 = "Hello, World!";

let str2 = String(10);

let str3 = `${true}`;

// Number

let num1 = 42;

let num2 = +'55';

let num3 = Number('66');

// Boolean

let bool1 = true;

let bool2 = Boolea('false');

let bool3 = !!' '; // true

// Null

let nullValue = null;

let nullValue2 = ;

// Undefined

let undefinedValue;


// Symbol

const sym1 = Symbol('description');

const sym2 = Symbol.for('sharedSymbol');

// BigInt

const bigInt1 = 1565165165165165165165165165165165n;

const bigInt2 = BigInt(1565165165);



// 4) Почему, если обратиться к переменным созданным через let, const до их объявления - мы получаем ReferenceError?

// Ответ:



// 5) Решить: 

// const res = "B" + "a" + (1 - "hello");
// console.log(res); //

// const res2 = (true && 3) + "d";
// console.log(res2); //

// const res3 = Boolean(true && 3) + "d";
// console.log(res3); //